package template.spark

import org.apache.spark.sql.DataFrame

/**
  * create by liush on 2018-3-20
  * Spark SQL中使用time windows
  */
object timeWindow extends App with InitSpark{
  import org.apache.spark.sql.functions._
  //时间序列数据
  val stocksDF = spark.read.option("header","true").option("inferSchema","true").csv("file:///Users/apple/Idea/workspace/spark-gradle-template/data/iteblog_apple.csv")
  //stocksDF.show(20)
  //将计算2016年Apple公司每周股票的收盘价格平均值
  //对原始数据进行过滤
  val stocks2016 = stocksDF.filter("year(Date)==2016")
  //对每个星期创建一个窗口
  /**
    * Date和Close两列,它们分别代表股票交易时间和当天收盘的价格
    * 现在我们需要对每个星期创建一个窗口
    * window一般在group by语句中使用,window方法的第一个参数指定了时间所在的列;
    * 第二个参数指定了窗口的持续时间(duration),它的单位可以是seconds、minutes、hours、days或者weeks,
    * 创建好窗口之后,我们可以计算平均值。
    */
  val tumblingWindowDS = stocks2016.groupBy(window(stocks2016.col("Date"),"1 week")).agg(avg("Close").as("weekly_average"))
  tumblingWindowDS.show(20,false)
  //schema==StructField(window,StructType(StructField(start,TimestampType,true), StructField(end,TimestampType,true)),true),StructField(weekly_average,DoubleType,true)
  //println("===schema=="+tumblingWindowDS.schema.mkString(","))
  //打印window的值
  //我们可以打印出window中的值，我们先定义好打印的公共函数
  /**
    * 上面的输出按照window.start进行了排序,这个字段标记了窗口的开始时间。
    * 上面的输出你可能已经看到了第一行的开始时间是2015-12-31,结束时间是2016-01-07。
    * 但是你从原始数据可以得到：2016年Apple公司的股票交易信息是从2016-01-04开始的;
    * 原因是2016-01-01是元旦,而2016-01-02和2016-01-03正好是周末,期间没有股票交易。
    * 我们可以手动指定窗口的开始时间来解决这个问题。
    * @param windowDF
    * @param aggCol
    */
  def printWindow(windowDF:DataFrame, aggCol:String) ={
   // println("===windowDF=="+windowDF.schema.mkString(","))
    //window.start进行了排序,这个字段标记了窗口的开始时间
    windowDF.sort("window.start").
      select("window.start","window.end",s"$aggCol").
      show(truncate = false)
  }
  //然后我们打印出tumblingWindowDS中的值：
  /**
      +---------------------+---------------------+------------------+
      |start                |end                  |weekly_average    |
      +---------------------+---------------------+------------------+
      |2015-12-31 08:00:00.0|2016-01-07 08:00:00.0|101.30249774999999|
      |2016-01-07 08:00:00.0|2016-01-14 08:00:00.0|98.47199859999999 |
      |2016-01-14 08:00:00.0|2016-01-21 08:00:00.0|96.72000125000001 |
      |2016-01-21 08:00:00.0|2016-01-28 08:00:00.0|97.6719984        |
      |2016-01-28 08:00:00.0|2016-02-04 08:00:00.0|96.239999         |
      |2016-02-04 08:00:00.0|2016-02-11 08:00:00.0|94.39799819999999 |
      |2016-02-11 08:00:00.0|2016-02-18 08:00:00.0|96.2525005        |
      |2016-02-18 08:00:00.0|2016-02-25 08:00:00.0|96.09400000000001 |
      |2016-02-25 08:00:00.0|2016-03-03 08:00:00.0|99.276001         |
      |2016-03-03 08:00:00.0|2016-03-10 08:00:00.0|101.64000100000001|
      |2016-03-10 08:00:00.0|2016-03-17 08:00:00.0|104.226001        |
      |2016-03-17 08:00:00.0|2016-03-24 08:00:00.0|106.0699996       |
      |2016-03-24 08:00:00.0|2016-03-31 08:00:00.0|107.8549995       |
      |2016-03-31 08:00:00.0|2016-04-07 08:00:00.0|110.08399979999999|
      |2016-04-07 08:00:00.0|2016-04-14 08:00:00.0|110.4520004       |
      |2016-04-14 08:00:00.0|2016-04-21 08:00:00.0|107.46800060000001|
      |2016-04-21 08:00:00.0|2016-04-28 08:00:00.0|101.5520004       |
      |2016-04-28 08:00:00.0|2016-05-05 08:00:00.0|93.9979994        |
      |2016-05-05 08:00:00.0|2016-05-12 08:00:00.0|92.35599959999999 |
      |2016-05-12 08:00:00.0|2016-05-19 08:00:00.0|93.3299974        |
      +---------------------+---------------------+------------------+
    */
  /**
    * 输出按照window.start进行了排序，这个字段标记了窗口的开始时间。
    * 上面的输出你可能已经看到了第一行的开始时间是2015-12-31，结束时间是2016-01-07。
    * 但是你从原始数据可以得到：2016年Apple公司的股票交易信息是从2016-01-04开始的；
    * 原因是2016-01-01是元旦，而2016-01-02和2016-01-03正好是周末,期间没有股票交易
    */
  printWindow(tumblingWindowDS,"weekly_average")
  //我们可以手动指定窗口的开始时间来解决这个问题。
  /**
    * 在前面的示例中,我们使用的是tumbling window,为了能够指定开始时间,我们需要使用sliding window(滑动窗口),到目前为止,
    * 没有相关API来创建带有开始时间的tumbling window,但是我们可以通过将窗口时间(window duration)和滑动时间(slide duration)设置成一样来创建带有开始时间的tumbling window
    * 4 days参数就是开始时间的偏移量;前两个参数分别代表窗口时间和滑动时间,我们打印出这个窗口的内容：
    */
  val iteblogWindowWithStartTime = stocks2016.groupBy(window(stocks2016.col("Date"),"1 week","1 week", "4 days")).agg(avg("Close").as("weekly_average"))
  printWindow(iteblogWindowWithStartTime,"weekly_average")
  /**
    * printWindow(iteblogWindowWithStartTime,"weekly_average")
      +---------------------+---------------------+------------------+
      |start                |end                  |weekly_average    |
      +---------------------+---------------------+------------------+
      |2015-12-28 08:00:00.0|2016-01-04 08:00:00.0|105.349998        |
      |2016-01-04 08:00:00.0|2016-01-11 08:00:00.0|99.0699982        |
      |2016-01-11 08:00:00.0|2016-01-18 08:00:00.0|98.49999799999999 |
      |2016-01-18 08:00:00.0|2016-01-25 08:00:00.0|98.1220016        |
      |2016-01-25 08:00:00.0|2016-02-01 08:00:00.0|96.2539976        |
      |2016-02-01 08:00:00.0|2016-02-08 08:00:00.0|95.29199960000001 |
      |2016-02-08 08:00:00.0|2016-02-15 08:00:00.0|94.2374975        |
      |2016-02-15 08:00:00.0|2016-02-22 08:00:00.0|96.7880004        |
      |2016-02-22 08:00:00.0|2016-02-29 08:00:00.0|96.23000160000001 |
      |2016-02-29 08:00:00.0|2016-03-07 08:00:00.0|101.53200079999999|
      |2016-03-07 08:00:00.0|2016-03-14 08:00:00.0|101.6199998       |
      |2016-03-14 08:00:00.0|2016-03-21 08:00:00.0|105.63600160000001|
      |2016-03-21 08:00:00.0|2016-03-28 08:00:00.0|105.92749950000001|
      |2016-03-28 08:00:00.0|2016-04-04 08:00:00.0|109.46799940000001|
      |2016-04-04 08:00:00.0|2016-04-11 08:00:00.0|109.39799980000001|
      |2016-04-11 08:00:00.0|2016-04-18 08:00:00.0|110.3820004       |
      |2016-04-18 08:00:00.0|2016-04-25 08:00:00.0|106.15400079999999|
      |2016-04-25 08:00:00.0|2016-05-02 08:00:00.0|96.8759994        |
      |2016-05-02 08:00:00.0|2016-05-09 08:00:00.0|93.6240004        |
      |2016-05-09 08:00:00.0|2016-05-16 08:00:00.0|92.13399799999999 |
      +---------------------+---------------------+------------------+
    从上面的结果可以看出,我们已经有了一个从2016-01-04的结果；
    不过结果中还有2015年的数据,原因是我们的开始时间是4 days,016-01-04之前的一周数据也会被显示出,我们可以使用filter来过滤掉那行数据：
    */
  val filteredWindow = iteblogWindowWithStartTime.filter("year(window.start)=2016")
  printWindow(filteredWindow,"weekly_average")
  /**
    * printWindow(filteredWindow,"weekly_average")
      +---------------------+---------------------+------------------+
      |start                |end                  |weekly_average    |
      +---------------------+---------------------+------------------+
      |2016-01-04 08:00:00.0|2016-01-11 08:00:00.0|99.0699982        |
      |2016-01-11 08:00:00.0|2016-01-18 08:00:00.0|98.49999799999999 |
      |2016-01-18 08:00:00.0|2016-01-25 08:00:00.0|98.1220016        |
      |2016-01-25 08:00:00.0|2016-02-01 08:00:00.0|96.2539976        |
      |2016-02-01 08:00:00.0|2016-02-08 08:00:00.0|95.29199960000001 |
      |2016-02-08 08:00:00.0|2016-02-15 08:00:00.0|94.2374975        |
      |2016-02-15 08:00:00.0|2016-02-22 08:00:00.0|96.7880004        |
      |2016-02-22 08:00:00.0|2016-02-29 08:00:00.0|96.23000160000001 |
      |2016-02-29 08:00:00.0|2016-03-07 08:00:00.0|101.53200079999999|
      |2016-03-07 08:00:00.0|2016-03-14 08:00:00.0|101.6199998       |
      |2016-03-14 08:00:00.0|2016-03-21 08:00:00.0|105.63600160000001|
      |2016-03-21 08:00:00.0|2016-03-28 08:00:00.0|105.92749950000001|
      |2016-03-28 08:00:00.0|2016-04-04 08:00:00.0|109.46799940000001|
      |2016-04-04 08:00:00.0|2016-04-11 08:00:00.0|109.39799980000001|
      |2016-04-11 08:00:00.0|2016-04-18 08:00:00.0|110.3820004       |
      |2016-04-18 08:00:00.0|2016-04-25 08:00:00.0|106.15400079999999|
      |2016-04-25 08:00:00.0|2016-05-02 08:00:00.0|96.8759994        |
      |2016-05-02 08:00:00.0|2016-05-09 08:00:00.0|93.6240004        |
      |2016-05-09 08:00:00.0|2016-05-16 08:00:00.0|92.13399799999999 |
      |2016-05-16 08:00:00.0|2016-05-23 08:00:00.0|94.77999880000002 |
      +---------------------+---------------------+------------------+
    */
}
